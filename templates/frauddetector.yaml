AWSTemplateFormatVersion: 2010-09-09
Description: 'Amazon Fraud Detector integrations'
Parameters:
  StackVersion:
    Description: 'CloudFormation Stack version.

      Use ''release'' version unless you are customizing the

      CloudFormation templates and solution artifacts.

      '
    Type: String
    Default: release
    AllowedValues:
    - release
    - development
Mappings:
  BlogS3BucketName:
    development:
      Prefix: fraud-detector-blog-assets
    release:
      Prefix: fraud-detector-blog-assets
Resources:
  TrainingBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
  OutputBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
  BasicNotebookInstance:
    Type: AWS::SageMaker::NotebookInstance
    Properties:
      InstanceType: ml.t3.medium
      NotebookInstanceName: FraudDetectionNotebookInstance
      RoleArn:
        Fn::GetAtt:
        - NotebookInstanceExecutionRole
        - Arn
      LifecycleConfigName:
        Fn::GetAtt:
        - BasicNotebookInstanceLifecycleConfig
        - NotebookInstanceLifecycleConfigName
    DependsOn:
    - NotebookInstanceIAMPolicy
    Metadata:
      cfn_nag:
        rules_to_suppress:
        - id: W1201
          reason: Solution does not have KMS encryption enabled by default
  BasicNotebookInstanceLifecycleConfig:
    Type: AWS::SageMaker::NotebookInstanceLifecycleConfig
    Properties:
      OnCreate:
      - Content:
          Fn::Base64:
            Fn::Sub:
            - 'set -e

              # perform following actions as ec2-user

              sudo -u ec2-user -i <<EOF

              cd /home/ec2-user/SageMaker

              # copy source files

              aws s3 sync s3://${BlogS3BucketNamePrefix}/notebooks/
              .

              # set environment variables via .env file

              touch .env

              echo "FRAUD_STACK_NAME=${AWS::StackName}" >> .env

              echo "AWS_ACCOUNT_ID=${AWS::AccountId}" >> .env

              echo "AWS_REGION=${AWS::Region}" >> .env

              echo "SAGEMAKER_IAM_ROLE=${NotebookInstanceExecutionRole.Arn}" >> .env

              EOF

              '
            - BlogS3BucketNamePrefix:
                Fn::FindInMap:
                - BlogS3BucketName
                - Ref: StackVersion
                - Prefix
      OnStart:
      - Content:
          Fn::Base64:
            Fn::Sub: 'set -e

              # perform following actions as ec2-user

              sudo -u ec2-user -i <<EOF

              cd /home/ec2-user/SageMaker

              # install Python dependencies in the python3 conda environment

              source /home/ec2-user/anaconda3/bin/activate python3

              pip install --upgrade pip==20.1.1

              # Requirements to run the notebook and local installation of the solution''s
              code

              pip install -r ./source/notebooks/requirements.txt

              pip install -e ./source/notebooks/

              # Necessary to avoid issues with containers using this as entry point

              rm -rf ./source/notebooks/src/package.egg-info

              EOF

              '
  NotebookInstanceExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - sagemaker.amazonaws.com
          Action:
          - sts:AssumeRole
  NotebookInstanceIAMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: fraud-detection-notebook-instance-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - s3:ListBucket
          Resource:
          - Fn::Sub:
            - arn:aws:s3:::${BlogS3BucketNamePrefix}-${AWS::Region}
            - BlogS3BucketNamePrefix:
                Fn::FindInMap:
                - BlogS3BucketName
                - Ref: StackVersion
                - Prefix
        - Effect: Allow
          Action:
          - s3:GetObject
          Resource:
          - Fn::Sub:
            - arn:aws:s3:::${BlogS3BucketNamePrefix}-${AWS::Region}/*
            - BlogS3BucketNamePrefix:
                Fn::FindInMap:
                - BlogS3BucketName
                - Ref: StackVersion
                - Prefix
        - Effect: Allow
          Action:
          - s3:GetBucketLocation
          - s3:ListBucket
          - s3:GetObject
          - s3:PutObject
          - s3:DeleteObject
          Resource:
          - Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: TrainingBucket
          - Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: TrainingBucket
              - /*
        - Effect: Allow
          Action:
          - ecr:GetDownloadUrlForLayer
          - ecr:BatchGetImage
          - ecr:BatchCheckLayerAvailability
          Resource:
          - Fn::Join:
            - ''
            - - 'arn:aws:ecr:'
              - Ref: AWS::Region
              - ':'
              - Ref: AWS::AccountId
              - :repository/*
        - Effect: Allow
          Action:
          - ec2:CreateVpcEndpoint
          - ec2:DescribeRouteTables
          Resource: '*'
        - Effect: Allow
          Action:
          - cloudwatch:PutMetricData
          - cloudwatch:GetMetricData
          - cloudwatch:GetMetricStatistics
          - cloudwatch:ListMetrics
          Resource:
          - Fn::Join:
            - ''
            - - 'arn:aws:cloudwatch:'
              - Ref: AWS::Region
              - ':'
              - Ref: AWS::AccountId
              - :*
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:DescribeLogStreams
          - logs:GetLogEvents
          - logs:PutLogEvents
          Resource:
            Fn::Join:
            - ''
            - - 'arn:aws:logs:'
              - Ref: AWS::Region
              - ':'
              - Ref: AWS::AccountId
              - :log-group:/aws/sagemaker/*
        - Effect: Allow
          Action:
          - iam:PassRole
          Resource:
          - Fn::GetAtt:
            - NotebookInstanceExecutionRole
            - Arn
          Condition:
            StringEquals:
              iam:PassedToService: sagemaker.amazonaws.com
        - Effect: Allow
          Action:
          - iam:GetRole
          Resource:
          - Fn::GetAtt:
            - NotebookInstanceExecutionRole
            - Arn
      Roles:
      - Ref: NotebookInstanceExecutionRole
    Metadata:
      cfn_nag:
        rules_to_suppress:
        - id: W12
          reason: This policy needs to have * resource because some of the resources
            are created dynamically and some of its actions are * resource actions
Outputs:
  SageMakerNotebook:
    Description: Opens the Jupyter notebook to get started with model training
    Value:
      Fn::Sub: https://frauddetectionnotebookinstance.notebook.${AWS::Region}.sagemaker.aws/notebooks/source/notebooks/sagemaker_fraud_detection.ipynb